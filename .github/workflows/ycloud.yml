# Определяем название процесса (просто отображается на странице Actions в GitHub)
name: Push To Yandex Cloud CR

# Определяем условия запуска процесса
# Подробнее см. https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows)
on:
  # Позволяет запускать вручную из GitHub
  workflow_dispatch:

# Определяем процесс (состоит из нескольких последовательных/параллельных джобов)
jobs:
  # Но нам хватит одного
  build:
    # Для построение проекта от вас не требуется сервер или что-либо подобное, 
		# GitHub выполнит построение, используя собственный runner - такую
		# общедоступную 'виртуальную машину'
    runs-on: ubuntu-latest

    # Определяем шаги процесса
    steps:
      # Запускает предварительную проверку 
			# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Авторизация в Яндекс.Облаке (здесь ничего не меняем)
      - name: Yandex Cloud CR "Login" Action for GitHub Actions
        uses: yc-actions/yc-cr-login@v0.1-alpha
        with:
          yc-sa-json-credentials: "${{ secrets.YC_SA_JSON_CREDENTIALS }}"
      - name: "Build, tag, and push image to Yandex Cloud Container Registry"
        env:
          CR_REGISTRY: crpc8d2nuco96mg2a5f4
          CR_REPOSITORY: onebit
          IMAGE_TAG: "${{ github.sha }}"
          CLIENT_PORT: 3000
          SERVER_PORT: 3001
          POSTGRES_USER: "${{ secrets.POSTGRES_USER }}"
          POSTGRES_PASSWORD: "${{ secrets.POSTGRES_PASSWORD }}"
          POSTGRES_DB: postgres
          POSTGRES_PORT: 5432
        run: |
          docker compose build
          docker tag prakticum-client:latest cr.yandex/$CR_REGISTRY/prakticum-client:latest
          docker push cr.yandex/$CR_REGISTRY/prakticum-client:latest
          docker tag prakticum-server:latest cr.yandex/$CR_REGISTRY/prakticum-server:latest
          docker push cr.yandex/$CR_REGISTRY/prakticum-server:latest
